app ChordMate {
  wasp: {
    version: "^0.11.4"
  },
  title: "ChordMate",
  client: {
    rootComponent: import { Layout } from "@client/Layout.jsx",
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  },
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/pages/auth/Signup.jsx"
}

entity User {=psl
    id            Int         @id @default(autoincrement())
    username      String      @unique
    password      String
    preferences   Preferences @relation(fields: [preferencesId], references: [id])
    songs         Song[]
    preferencesId Int
psl=}

entity Preferences {=psl
    id     Int    @id @default(autoincrement())
    tempo  Int
    tuning String
    volume Int
    User   User[]
psl=}

entity Song {=psl
    id     Int     @id @default(autoincrement())
    title  String
    artist String
    chords Chord[]
    user   User    @relation(fields: [userId], references: [id])
    userId Int
psl=}

entity Chord {=psl
    id       Int    @id @default(autoincrement())
    name     String
    position Int
    song     Song   @relation(fields: [songId], references: [id])
    songId   Int
psl=}

action uploadSong {
  fn: import { uploadSong } from "@server/actions.js",
  entities: [Song, Chord]
}

action updatePreferences {
  fn: import { updatePreferences } from "@server/actions.js",
  entities: [User, Preferences]
}

query getSong {
  fn: import { getSong } from "@server/queries.js",
  entities: [Song, Chord]
}

query getUserPreferences {
  fn: import { getUserPreferences } from "@server/queries.js",
  entities: [User, Preferences]
}

route HomePageRoute { path: "/", to: HomePage }
page HomePage {
  component: import { HomePage } from "@client/pages/Home.jsx",
  authRequired: false
}

route SongRoute { path: "/song/:songId", to: SongPage }
page SongPage {
  component: import { SongPage } from "@client/pages/Song.jsx",
  authRequired: true
}

route PreferencesRoute { path: "/preferences", to: PreferencesPage }
page PreferencesPage {
  component: import { PreferencesPage } from "@client/pages/Preferences.jsx",
  authRequired: true
}
